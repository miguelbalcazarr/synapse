{
	"name": "Write to ODS",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "kyndryl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8c9dc3a2-edcc-4b14-903c-614c91f88162"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e4516ad2-d1ef-463b-817c-b2a88c0b12bd/resourceGroups/rg-kyndryl/providers/Microsoft.Synapse/workspaces/synwkyndryl/bigDataPools/kyndryl",
				"name": "kyndryl",
				"type": "Spark",
				"endpoint": "https://synwkyndryl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/kyndryl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Utils"
				],
				"execution_count": 149
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run Aprovisionamiento ODS"
				],
				"execution_count": 150
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# se define el esquema de tabla\r\n",
					"schema = StructType([ \r\n",
					"    StructField('SalesOrderID', IntegerType(), True), \r\n",
					"    StructField('RevisionNumber', ByteType(), True), \r\n",
					"    StructField('OrderDate', TimestampType(), True), \r\n",
					"    StructField('DueDate', TimestampType(), True), \r\n",
					"    StructField('ShipDate', TimestampType(), True), \r\n",
					"    StructField('Status', ByteType(), True),\r\n",
					"    StructField('OnlineOrderFlag', ByteType(), True),\r\n",
					"    StructField('SalesOrderNumber', StringType(), True),\r\n",
					"    StructField('PurchaseOrderNumber', StringType(), True),\r\n",
					"    StructField('AccountNumber', StringType(), True),\r\n",
					"    StructField('CustomerID', IntegerType(), True),\r\n",
					"    StructField('ShipToAddressID', IntegerType(), True),\r\n",
					"    StructField('BillToAddressID', IntegerType(), True),\r\n",
					"    StructField('ShipMethod', IntegerType(), True),\r\n",
					"    StructField('CreditCardApprovalCode', StringType(), True),\r\n",
					"    StructField('SubTotal', DecimalType(), True),\r\n",
					"    StructField('TaxAmt', DecimalType(), True),\r\n",
					"    StructField('Freight', DecimalType(), True),\r\n",
					"    StructField('TotalDue', DecimalType(), True),\r\n",
					"    StructField('Comment', StringType(), True),\r\n",
					"    StructField('rowguid', StringType(), True),\r\n",
					"    StructField('ModifiedDate', TimestampType(), True)\r\n",
					"]) "
				],
				"execution_count": 151
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#leemos delta de staging\r\n",
					"df = getReadDelta(\"staging\",\"SalesOrderHeader\")"
				],
				"execution_count": 152
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"coltype_map = { \r\n",
					"    \"SalesOrderID\": IntegerType(), \r\n",
					"    \"RevisionNumber\": ByteType(), \r\n",
					"    \"OrderDate\": TimestampType(), \r\n",
					"    \"DueDate\": TimestampType(),  \r\n",
					"    \"ShipDate\": TimestampType(), \r\n",
					"    \"Status\": StringType(),\r\n",
					"    \"OnlineOrderFlag\": ByteType(), \r\n",
					"    \"SalesOrderNumber\": StringType(), \r\n",
					"    \"PurchaseOrderNumber\": StringType(), \r\n",
					"    \"AccountNumber\": StringType(), \r\n",
					"    \"CustomerID\": IntegerType(), \r\n",
					"    \"ShipToAddressID\": IntegerType(), \r\n",
					"    \"BillToAddressID\": IntegerType(), \r\n",
					"    \"ShipMethod\": IntegerType(), \r\n",
					"    \"CreditCardApprovalCode\": StringType(), \r\n",
					"    \"SubTotal\": DecimalType(18,4), \r\n",
					"    \"TaxAmt\": DecimalType(18,4), \r\n",
					"    \"Freight\": DecimalType(18,4), \r\n",
					"    \"TotalDue\": DecimalType(18,4), \r\n",
					"    \"Comment\": StringType(), \r\n",
					"    \"rowguid\": StringType(), \r\n",
					"    \"ModifiedDate\": TimestampType()  \r\n",
					"} "
				],
				"execution_count": 153
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for columna, tipo in coltype_map.items():\r\n",
					"    dfSchema = df.withColumn(columna, col(columna).cast(tipo))\r\n",
					"\r\n",
					"dfSchema.printSchema()"
				],
				"execution_count": 160
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#escribimos un dataframe en modo overwrite a ods\r\n",
					"#getWriteDelta(df, \"overwrite\", \"ods\", \"SalesOrderHeader\")"
				],
				"execution_count": null
			}
		]
	}
}