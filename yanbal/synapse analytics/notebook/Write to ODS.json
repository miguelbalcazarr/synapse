{
	"name": "Write to ODS",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "kyndryl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "80080faa-ee4c-446f-934c-c42b4bc75808"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e4516ad2-d1ef-463b-817c-b2a88c0b12bd/resourceGroups/rg-kyndryl/providers/Microsoft.Synapse/workspaces/synwkyndryl/bigDataPools/kyndryl",
				"name": "kyndryl",
				"type": "Spark",
				"endpoint": "https://synwkyndryl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/kyndryl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run Utils"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%run Aprovisionamiento ODS"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#leemos delta de staging\r\n",
					"df = getReadDelta(\"staging\",\"SalesOrderHeader\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#escribimos un dataframe en modo overwrite a ods\r\n",
					"#getWriteDelta(df, \"overwrite\", \"ods\", \"SalesOrderHeader\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"dfRefined = df \\\r\n",
					"            .withColumn(\"SalesOrderID\",col(\"SalesOrderID\").cast(IntegerType()).alias(\"SalesOrderID\")) \\\r\n",
					"            .withColumn(\"RevisionNumber\",col(\"RevisionNumber\").cast(ByteType()).alias(\"RevisionNumber\")) \\\r\n",
					"            .withColumn(\"OrderDate\",col(\"OrderDate\").cast(TimestampType()).alias(\"OrderDate\")) \\\r\n",
					"            .withColumn(\"DueDate\",col(\"DueDate\").cast(TimestampType()).alias(\"DueDate\")) \\\r\n",
					"            .withColumn(\"ShipDate\",col(\"ShipDate\").cast(TimestampType()).alias(\"ShipDate\")) \\\r\n",
					"            .withColumn(\"Status\",col(\"Status\").cast(ByteType()).alias(\"Status\")) \\\r\n",
					"            .withColumn(\"OnlineOrderFlag\",col(\"OnlineOrderFlag\").cast(ByteType()).alias(\"OnlineOrderFlag\")) \\\r\n",
					"            .withColumn(\"SalesOrderNumber\",col(\"SalesOrderNumber\").cast(StringType()).alias(\"SalesOrderNumber\")) \\\r\n",
					"            .withColumn(\"PurchaseOrderNumber\",col(\"PurchaseOrderNumber\").cast(StringType()).alias(\"PurchaseOrderNumber\")) \\\r\n",
					"            .withColumn(\"AccountNumber\",col(\"AccountNumber\").cast(StringType()).alias(\"AccountNumber\")) \\\r\n",
					"            .withColumn(\"CustomerID\",col(\"CustomerID\").cast(IntegerType()).alias(\"CustomerID\")) \\\r\n",
					"            .withColumn(\"ShipToAddressID\",col(\"ShipToAddressID\").cast(IntegerType()).alias(\"ShipToAddressID\")) \\\r\n",
					"            .withColumn(\"BillToAddressID\",col(\"BillToAddressID\").cast(IntegerType()).alias(\"BillToAddressID\")) \\\r\n",
					"            .withColumn(\"ShipMethod\",col(\"ShipMethod\").cast(IntegerType()).alias(\"ShipMethod\")) \\\r\n",
					"            .withColumn(\"CreditCardApprovalCode\",col(\"CreditCardApprovalCode\").cast(StringType()).alias(\"CreditCardApprovalCode\")) \\\r\n",
					"            .withColumn(\"SubTotal\",col(\"SubTotal\").cast(DecimalType()).alias(\"SubTotal\")) \\\r\n",
					"            .withColumn(\"TaxAmt\",col(\"TaxAmt\").cast(DecimalType()).alias(\"TaxAmt\")) \\\r\n",
					"            .withColumn(\"Freight\",col(\"Freight\").cast(DecimalType()).alias(\"Freight\")) \\\r\n",
					"            .withColumn(\"TotalDue\",col(\"TotalDue\").cast(DecimalType()).alias(\"TotalDue\")) \\\r\n",
					"            .withColumn(\"Comment\",col(\"Comment\").cast(StringType()).alias(\"Comment\")) \\\r\n",
					"            .withColumn(\"rowguid\",col(\"rowguid\").cast(StringType()).alias(\"rowguid\")) \\\r\n",
					"            .withColumn(\"ModifiedDate\",col(\"ModifiedDate\").cast(TimestampType()).alias(\"ModifiedDate\")) \r\n",
					"            \r\n",
					"            \r\n",
					"\r\n",
					"# .withColumn(\"OrderDate\",col(\"OrderDate\").cast(TimestampType()).alias(\"OrderDate\")) \\\r\n",
					"display(dfRefined)"
				],
				"execution_count": 34
			}
		]
	}
}