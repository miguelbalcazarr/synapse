{
	"name": "utils",
	"properties": {
		"folder": {
			"name": "utils"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "kyndryl",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e302ba56-1852-4411-8a3a-63b0a9a060a9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e4516ad2-d1ef-463b-817c-b2a88c0b12bd/resourceGroups/rg-kyndryl/providers/Microsoft.Synapse/workspaces/synwkyndryl/bigDataPools/kyndryl",
				"name": "kyndryl",
				"type": "Spark",
				"endpoint": "https://synwkyndryl.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/kyndryl",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# se importa de librerias\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"\r\n",
					"from pyspark.sql.functions import *\r\n",
					"from pyspark.sql.types import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# parametros globales\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"\r\n",
					"storage_account = \"stakyndryl\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# (Solo para uso en desarrollo)Borra tabla y path\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"\r\n",
					"def delete_table(table, folder_path):\r\n",
					"    spark.sql(f\"drop table if exists {table}\")\r\n",
					"    \r\n",
					"    if mssparkutils.fs.exists(folder_path):\r\n",
					"        mssparkutils.fs.rm(folder_path, True)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# se lee una query de Azure SQL\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"# parametros:\r\n",
					"#   db : nombre de base de datos\r\n",
					"#   query : query sql\r\n",
					"\r\n",
					"def read_sql(db, query):\r\n",
					"    server = mssparkutils.credentials.getSecret('kvkyndryl','azuresqlserver')\r\n",
					"    url = f\"{server}{db}\"\r\n",
					"    user = mssparkutils.credentials.getSecret('kvkyndryl',\"azuresqluser\")\r\n",
					"    #principal_client_id = mssparkutils.credentials.getSecret('kvkyndryl',\"principalclientid\")\r\n",
					"    #principal_secret = mssparkutils.credentials.getSecret('kvkyndryl',\"principalsecret\")\r\n",
					"    password = mssparkutils.credentials.getSecret('kvkyndryl',\"azuresqlpassword\")\r\n",
					"\r\n",
					"    df = spark.read \\\r\n",
					"    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\r\n",
					"    .option(\"url\", url) \\\r\n",
					"    .option(\"query\", query) \\\r\n",
					"    .option(\"user\", user) \\\r\n",
					"    .option(\"password\", password).load()\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# se escribe csv\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"# parametros:\r\n",
					"#   df : dataframe a escribir\r\n",
					"#   mode : modo de escritura [\"append\", \"overwrite\", \"ignore\"]\r\n",
					"#   header : encabezado [True, False]\r\n",
					"#   delimiter : delimitado [\",\", \"|\", \" \", \";\"]\r\n",
					"#   container : nombre de contenedor en ADLS\r\n",
					"#   path : ruta donde se guardar√° el csv [\"abfss://contenedor@nombre_adls.dfs.core.windows.net/?/nombre_tabla\"]\r\n",
					"\r\n",
					"def write_csv(df, mode, header, delimiter,container, path):\r\n",
					"    df.write.format(\"csv\") \\\r\n",
					"    .mode(mode) \\\r\n",
					"    .option(\"header\", header) \\\r\n",
					"    .option(\"delimiter\", delimiter) \\\r\n",
					"    .save(f\"abfss://{container}@{storage_account}.dfs.core.windows.net/{path}\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# se lee csv\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"# parametros:\r\n",
					"#   header : encabezado [True, False]\r\n",
					"#   delimiter : delimitado [\",\", \"|\", \" \", \";\"]\r\n",
					"#   container : nombre de contenedor en ADLS\r\n",
					"#   path : ruta donde se leera el csv [\"abfss://contenedor@nombre_adls.dfs.core.windows.net/?/nombre_tabla\"]\r\n",
					"\r\n",
					"def read_csv(header, delimiter, container, path):\r\n",
					"    df = spark.read \\\r\n",
					"    .option(\"header\",header) \\\r\n",
					"    .option(\"delimiter\",delimiter) \\\r\n",
					"    .csv(f\"abfss://{container}@{storage_account}.dfs.core.windows.net/{path}\")\r\n",
					"\r\n",
					"    return df"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ------------------------------------------------------------------------------------------\r\n",
					"# se escribe delta\r\n",
					"# ------------------------------------------------------------------------------------------\r\n",
					"# parametros:\r\n",
					"#   header : encabezado [True, False]\r\n",
					"#   delimiter : delimitado [\",\", \"|\", \" \", \";\"]\r\n",
					"#   container : nombre de contenedor en ADLS\r\n",
					"#   path : ruta donde se leera el csv [\"abfss://contenedor@nombre_adls.dfs.core.windows.net/?/nombre_tabla\"]\r\n",
					"\r\n",
					"def write_delta(df, mode, container, path):\r\n",
					"\r\n",
					"    df.write.format(\"delta\") \\\r\n",
					"    .mode(mode) \\\r\n",
					"    .save(f\"abfss://{container}@{storage_account}.dfs.core.windows.net/{path}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def read_delta(container, path):\r\n",
					"    df = spark.read.format(\"delta\") \\\r\n",
					"    .load(f\"abfss://{container}@{storage_account}.dfs.core.windows.net/{path}\")\r\n",
					"    \r\n",
					"    return df"
				],
				"execution_count": null
			}
		]
	}
}